// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(Swp391ticketResellPlatformContext))]
    [Migration("20241009030139_test2")]
    partial class test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusinessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessId"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("CanSkipVerification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BusinessId")
                        .HasName("PK__Business__F1EAA34E4683EB24");

                    b.HasIndex("PackageId");

                    b.HasIndex(new[] { "UserId" }, "UQ__Business__1788CCAD33896293")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2B774655C6");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF687E550EE");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<decimal?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime?>("MembershipDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MembershipStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MemberId")
                        .HasName("PK__Member__0CF04B385992FCDF");

                    b.HasIndex(new[] { "UserId" }, "UQ__Member__1788CCAD322EDE36")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("open");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF1F1FF602");

                    b.HasIndex("BuyerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Repository.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(21, 2)")
                        .HasComputedColumnSql("([Quantity]*[UnitPrice])", true);

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__57ED06A199236322");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Repository.Models.ServicePackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PackageId")
                        .HasName("PK__ServiceP__322035EC3DAEF18D");

                    b.ToTable("ServicePackage", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__96D4AAF720D68D04");

                    b.HasIndex(new[] { "UserId" }, "UQ__Staff__1788CCAD6422145F")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PdfFile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProcessingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("SeatNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("pending");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__712CC627FD251DF8");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.HasIndex(new[] { "Barcode" }, "UQ__Ticket__177800D32B38CA6D")
                        .IsUnique();

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("NetAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PlatformFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("processing");

                    b.Property<DateTime?>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4BBAEE492C");

                    b.HasIndex(new[] { "OrderId" }, "UQ__Transact__C3905BAEE7DD8BC1")
                        .IsUnique()
                        .HasFilter("[OrderID] IS NOT NULL");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Repository.Models.TransactionProcess", b =>
                {
                    b.Property<int>("TransactionProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionProcessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionProcessId"));

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("initiated");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TransactionProcessId")
                        .HasName("PK__Transact__8CFAA0F798B5CEB7");

                    b.HasIndex("TicketId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionProcess", (string)null);
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCACDD6F0454");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Repository.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__UserRole__8AFACE3A5486F317");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallet__84D4F92E52AB3BFF");

                    b.HasIndex(new[] { "UserId" }, "UQ__Wallet__1788CCAD8424177D")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Repository.Models.Business", b =>
                {
                    b.HasOne("Repository.Models.ServicePackage", "Package")
                        .WithMany("Businesses")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK__Business__Packag__4BAC3F29");

                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("Business")
                        .HasForeignKey("Repository.Models.Business", "UserId")
                        .HasConstraintName("FK__Business__UserID__4AB81AF0");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Feedback", b =>
                {
                    b.HasOne("Repository.Models.Member", "Buyer")
                        .WithMany("FeedbackBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Feedback__BuyerI__7B5B524B");

                    b.HasOne("Repository.Models.Member", "Seller")
                        .WithMany("FeedbackSellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Feedback__Seller__7C4F7684");

                    b.HasOne("Repository.Models.Ticket", "Ticket")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Feedback__Ticket__7D439ABD");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Repository.Models.Member", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("Repository.Models.Member", "UserId")
                        .HasConstraintName("FK__Member__UserID__30F848ED");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.HasOne("Repository.Models.Member", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Orders__BuyerID__5CD6CB2B");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Repository.Models.OrderItem", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__OrderItem__Order__628FA481");

                    b.HasOne("Repository.Models.Ticket", "Ticket")
                        .WithMany("OrderItems")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__OrderItem__Ticke__6383C8BA");

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Repository.Models.Staff", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Repository.Models.Staff", "UserId")
                        .HasConstraintName("FK__Staff__UserID__35BCFE0A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.HasOne("Repository.Models.Staff", "ApprovedByNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK__Ticket__Approved__5629CD9C");

                    b.HasOne("Repository.Models.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Ticket__Category__5535A963");

                    b.HasOne("Repository.Models.Member", "Seller")
                        .WithMany("Tickets")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Ticket__SellerID__5441852A");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Repository.Models.Transaction", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithOne("Transaction")
                        .HasForeignKey("Repository.Models.Transaction", "OrderId")
                        .HasConstraintName("FK__Transacti__Order__6E01572D");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Models.TransactionProcess", b =>
                {
                    b.HasOne("Repository.Models.Ticket", "Ticket")
                        .WithMany("TransactionProcesses")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Transacti__Ticke__75A278F5");

                    b.HasOne("Repository.Models.Transaction", "Transaction")
                        .WithMany("TransactionProcesses")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__Transacti__Trans__74AE54BC");

                    b.Navigation("Ticket");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.HasOne("Repository.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__276EDEB3");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Models.Wallet", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Repository.Models.Wallet", "UserId")
                        .HasConstraintName("FK__Wallet__UserID__3B75D760");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Category", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Repository.Models.Member", b =>
                {
                    b.Navigation("FeedbackBuyers");

                    b.Navigation("FeedbackSellers");

                    b.Navigation("Orders");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Repository.Models.ServicePackage", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Repository.Models.Staff", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Repository.Models.Ticket", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderItems");

                    b.Navigation("TransactionProcesses");
                });

            modelBuilder.Entity("Repository.Models.Transaction", b =>
                {
                    b.Navigation("TransactionProcesses");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Business");

                    b.Navigation("Member");

                    b.Navigation("Staff");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Repository.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
